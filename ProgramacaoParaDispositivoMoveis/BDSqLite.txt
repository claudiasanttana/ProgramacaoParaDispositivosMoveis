package com.example.app06_bdsqlite

import android.R.attr.name
import android.database.sqlite.SQLiteDatabase
import android.os.Bundle
import android.util.Log
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import kotlin.math.log

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        try {

            // Criar o banco de dados
            val bd = this.openOrCreateDatabase("app", MODE_PRIVATE, null)

            // Criar tabela
            bd.execSQL("CREATE TABLE IF NOT EXISTS pessoa (nome VARCHAR, idade INT(3))")

            //inserir dados- quando quiser q pare de criar mais registros e so comentar
            bd.execSQL("INSERT INTO pessoa (nome, idade) VALUES ('Marcos', 18)")
            bd.execSQL("INSERT INTO pessoa (nome, idade) VALUES ('Claudia', 30)")
            bd.execSQL("INSERT INTO pessoa (nome, idade) VALUES ('Mari', 20)")

            // recuperar pessoas - comando select

            // Recuperar pessoas - comando SELECT
            val cursor = bd.rawQuery("SELECT nome, idade FROM pessoa", null)


            val indiceNome = cursor!!.getColumnIndex("nome") //indice nome e igual a coluna 0
            val indiceIdade = cursor.getColumnIndex("idade") //indice da idade e coluna 1


            // Faça algo com os dados recuperados, como exibir no log ou adicionar a uma lista

            cursor.moveToFirst() // andando de linha em linha usando o move
            while (cursor!=null){ // quando o cursor for diferente de nulo ele vai percorrer cada registro
                Log.i("RESULTADO = NOME", cursor.getString(0))
                Log.i("RESULTADO = NOME", cursor.getString(indiceNome))
                Log.i("RESULTADO = IDADE", cursor.getString(indiceIdade))
                cursor.moveToNext()
            }

            cursor.close() // Não se esqueça de fechar o cursor para liberar recursos

            // Outras operações com o banco de dados
        } catch (e: Exception) {
            e.printStackTrace()
        }




        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }
}
